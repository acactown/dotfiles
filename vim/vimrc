filetype off
call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

" Most general settings first
set nocompatible            " Set Vim rather than Vi settings; must go first
set noeb                    " Set no audio or visual error beep
set bs=indent,eol,start     " Backspace over everything in insert mode
set history=500	            " Keep 50 lines of command line history

" Set items for view @ bottom of windows
set ruler                   " Show the cursor position all the time
set showcmd                 " Display incomplete commands
set showmode                " Display current mode
set ls=2                    " Always show status bar

" Remove overbright matching of parentheses
let g:loaded_matchparen = 1

" Syntax basics
syntax on
filetype indent on
set autoindent
set smartindent
filetype plugin on

" Text basics
set textwidth=75            " Set text to wrap at 75 columns

" Search basics
set incsearch               " Do incremental searching
set hlsearch                " Highlight all matches in a search

" Matchy match
"set showmatch               " Show matching brackets
set matchtime=1             " But turn it off quickly

" Don't use Ex mode, use Q for formatting
map Q gq

" Enable mouse
set mouse=a

" Use Dim for my colorscheme
colorscheme twilight

" Make tab in v-mode indent code
vmap <tab> >gv
vmap <s-tab> <gv

" Make tab in normal mode indent code
nmap <tab> I<tab><esc>
nmap <s-tab> ^i<bs><esc>

" Fix placement of backups and swap files
set backup
set backupdir=$HOME/.vim_backups,/tmp
set directory=/tmp,$HOME/.vim_backups

" Some Perl voodoo: insert Perl base & set filetype
imap ,perl #!/usr/bin/env perl<CR>use strict;
    \<CR>use warnings;<CR><esc>:set filetype=perl<ENTER>i
"
" Check for templates at start up
autocmd! BufNewFile * silent! 0r $HOME/.vim/templates/tpl.%:e

" Tell Vim to print using US-sized paper, not A4
set printoptions:paper:letter

" Stuff from here: http://tuxtraining.com/2008/11/11/exploring-vim-configurations
set hidden
nnoremap ' `
nnoremap ` '
let mapleader = ","
runtime macros/matchit.vim
set wildmenu
set wildmode=list:longest
set title
set scrolloff=3
nmap <silent> <leader>n :silent :nohlsearch<CR>
set listchars=tab:>-,trail:Â·,eol:$
nmap <silent> <leader>s :set nolist!<CR>
set shortmess=atI
nmap <silent> <leader>p :set invpaste<CR>
nmap <silent> <leader>d :NERDTreeToggle<CR>

inoremap kj <Esc>
let g:liquid_highlight_types=["html","erb=eruby","html+erb=eruby.html"]

let g:closetag_html_style=1
"source $HOME/.vim/bundle/vim-varia/plugin/closetag.vim

" status line hijinks
set statusline=%<%f\ %h%m%r%y
\%{exists('g:loaded_fugitive')?fugitive#statusline():''}
\%{exists('g:loaded_rvm')?rvm#statusline_ft_ruby():''}
\%{&filetype=='perl'?'['.system($perlv).']':''}
\%=%-14.(%l,%c%V%)\ %P

"let g:delimitMate_expand_space=1
" Uncomment on a MacBook
"set t_ku=[A
"set t_kd=[B
"set t_kr=[C
"set t_kl=[D

" Modeline experiment
" Append modeline after last line in buffer.
" Use substitute() instead of printf() to handle '%%s' modeline in LaTeX
" files.
function! AppendModeline()
  let l:modeline = printf(" vim: set ts=%d sw=%d tw=%d :",
        \ &tabstop, &shiftwidth, &textwidth)
  let l:modeline = substitute(&commentstring, "%s", l:modeline, "")
  call append(line("$"), l:modeline)
endfunction
nnoremap <silent> <Leader>ml :call AppendModeline()<CR>
" Shortcut to rapidly toggle `set list`
nmap <leader>l :set list!<CR>

" Use the same symbols as TextMate for tabstops and EOLs
set listchars=tab:â–¸\ ,eol:Â¬
